name: Release Build
run-name: Building for ${{ github.ref_name }}
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  vite-build:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.Store-Cache-Key.outputs.cache-key }}
    defaults:
      run:
        working-directory: ./front
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
          package_json_file: 'front/package.json'

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: 'front/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Executable
        run: pnpm run build

      - name: Store Cache Key
        id: Store-Cache-Key
        run: echo "cache-key=frontpage-dist-${{ hashFiles('page/**') }}" >> "$GITHUB_OUTPUT"

      - name: Cache
        uses: actions/cache@v4.2.1
        with:
          path: page
          key: ${{ steps.Store-Cache-Key.outputs.cache-key }}

  build:
    env:
      UV_INDEX: https://pypi.org/simple
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux
            arch: x64

          - os: ubuntu-24.04-arm
            platform: linux
            arch: arm64

          - os: macos-15-intel
            platform: osx
            arch: x64

          - os: macos-15
            platform: osx
            arch: arm64

          - os: windows-2025
            platform: win
            arch: x64

          - os: windows-11-arm
            platform: win
            arch: arm64
    runs-on: ${{ matrix.os }}
    name: Build (${{ matrix.platform }}-${{ matrix.arch }})
    needs: vite-build

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Restore cached frontend artifacts
        uses: actions/cache@v4.2.1
        with:
          path: page
          key: ${{ needs.vite-build.outputs.cache-key }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true

      - name: Setup ccache
        if: ${{ matrix.platform != 'win' }}
        uses: Chocobo1/setup-ccache-action@v1

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install Dependencies
        run: uv sync --dev

      - name: Cache Nuitka cache directory
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/nuitka/cache
          key: nuitka-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            nuitka-${{ matrix.platform }}-${{ matrix.arch }}-

      - name: Build Executable for Windows
        if: ${{ matrix.platform == 'win' }}
        env:
          NUITKA_CCACHE_BINARY: ${{ env.ccache_symlinks_path }}
          NUITKA_CACHE_DIR: ${{ runner.temp }}/nuitka/cache
        run: uv run python -m nuitka --standalone --mingw64 --windows-icon-from-ico=logo.jpg --assume-yes-for-downloads --user-package-configuration-file=nuitka-package.config.yml --remove-output --lto=yes --experimental=debug-report-traceback --output-dir=build -o MFA-WebUI main.py

      - name: Build Executable
        if: ${{ matrix.platform != 'win' }}
        env:
          NUITKA_CACHE_DIR: ${{ runner.temp }}/nuitka/cache
        run: uv run python -m nuitka --standalone --macos-app-icon=logo.jpg --linux-icon=logo.jpg --assume-yes-for-downloads --user-package-configuration-file=nuitka-package.config.yml --remove-output --lto=yes --experimental=debug-report-traceback --output-dir=build -o MFA-WebUI main.py

      - name: Copy Resource
        if: ${{ matrix.platform != 'win' }}
        run: |
          cp -r config build/main.dist/config
          cp -r page build/main.dist/page

      - name: Copy Resource for Windows
        if: ${{ matrix.platform == 'win' }}
        run: |
          xcopy .\config\ build\main.dist\config\ /S /I
          xcopy .\page\ build\main.dist\page\ /S /I

      - name: Create Version file
        run: echo "${{ github.ref_name }}" >> build/main.dist/version

      - name: Compress Build
        run: 7z a -t7z -mx=9 -mmt -ms -r MFA-WebUI-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}.7z "./build/main.dist/*"

      - name: Release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: ncipollo/release-action@v1.16.0
        with:
          draft: true
          allowUpdates: true
          artifacts: |
            MFA-WebUI-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}.7z

      - name: DEBUG
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: MFA-WebUI-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: MFA-WebUI-${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}.7z